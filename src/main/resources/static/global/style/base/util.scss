@mixin respond($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {  
    $breakpoint-value: map-get($breakpoints, $breakpoint);  
    @media (max-width: ($breakpoint-value)) {
      @content;
    }  
  } @else {
      @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
      // Prints a media query based on the value
      //@media (max-width: #{inspect(map-get($breakpoints, $breakpoint))}px) {
      @media only screen and (max-width: #{inspect(map-get($breakpoints, $breakpoint))}em) {       
          @content;
      }
  }
  // If the key doesn't exist in the map
  @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
      + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
};

@mixin respond-from($breakpoint) {
  // If the key exists in the m$ap
  @if map-has-key($breakpoints, $breakpoint) {
      // Prints a media query based on the value
      //$getBreakpoint : #{inspect(map-get($breakpoints, $breakpoint))};
      //$minBreakpoint : calc($getBreakpoint + 1);
      //@media (min-width: #{inspect(map-get($breakpoints, $breakpoint))}px) {
      @media only screen and (min-width: #{inspect(map-get($breakpoints, $breakpoint))}em) {
        @content;
    }
  }
  // If the key doesn't exist in the map
  @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
      + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/* margin,padding 0~50 */
@function size($start, $end) {
  $size : ();
  @for $i from $start through $end {
      $value : $i + 0;
      $size : append($size, $value);
  }
  @return $size;
}

@function getPx($value) {
  @if $value == 0 {
      @return $value;
  } @else {
      @return $value + 0px;
  }
}
$size : size(0, 80);
$position : ('l':'left', 'r':'right', 't':'top', 'b':'bottom');
$nameMap : ('m':'margin', 'p':'padding');

@mixin generate($nameMap : (), $position : (), $size : ()) {
  @each $preKey, $preValue in $nameMap {
      @each $px in $size {
          .#{$preKey}-#{$px} {
              #{$preValue} : getPx($px) !important;
          }
          @each $sufKey, $sufValue in $position {
              .#{$preKey}#{$sufKey}-#{$px} {
                  #{$preValue}-#{$sufValue} : getPx($px) !important;
              }
          }
      }
  }
}
@include generate($nameMap, $position, $size);

@mixin ellipsis($line) {
  @if ($line == 1) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: normal;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
  }
}
